from openai import OpenAI
import requests
import logging
import time

logger = logging.getLogger(__name__)
logging.basicConfig(level=logging.INFO)

def send_callback(callback_url, sale_token, client_id, messages):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–ª–±–µ–∫ —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –≤ Sale.
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        callback_url (str): URL, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç.
        sale_token (str): —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ Sale.
        client_id (str): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ Sale.
        messages (list): —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ChatGPT.
    """
    headers = {
        "Authorization": f"Bearer {sale_token}",
        "Content-Type": "application/json"
    }
    data = {
        "client_id": client_id,
        "messages": messages
    }
    try:
        response = requests.post(callback_url, json=data, headers=headers)
        response.raise_for_status()
        logger.info(f"‚úÖ Callback sent successfully to {callback_url}")
    except requests.exceptions.RequestException as e:
        logger.error(f"‚ùå Failed to send callback: {e}")

def stream_chat_completion(client, thread_id, asst_id, message, retries=3):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç—Ä–µ–¥ –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å—Ç—Ä–∏–º–∏–Ω–≥ –æ—Ç–≤–µ—Ç–æ–≤.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        thread_id (str): —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–¥–∞.
        asst_id (str): —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        message (str): —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        retries (int): –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç ChatGPT.
    """
    messages = []
    attempt = 0

    while attempt < retries:
        attempt += 1
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "user", "content": message}
                ],
                stream=True
            )
            
            # –°—Ç—Ä–∏–º–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ChatGPT
            for chunk in response:
                if chunk.choices[0].delta.content:
                    message_chunk = chunk.choices[0].delta.content
                    messages.append(message_chunk)
                    print(message_chunk, end="")  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª—å –ø–æ –º–µ—Ä–µ –ø–æ–ª—É—á–µ–Ω–∏—è
            
            logger.info("üèÅ Streaming completed.")
            return messages  # –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
        
        except Exception as e:
            logger.error(f"‚ùå Error during streaming attempt {attempt}: {e}")
            if attempt < retries:
                logger.info(f"üîÑ Retrying... (attempt {attempt + 1}/{retries})")
                time.sleep(2)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.
            else:
                logger.error(f"‚ùå Failed after {retries} attempts.")
                return []

def main(thread_id, asst_id, gpt_token, sale_token, client_id, callback_url, message):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–ª–±–µ–∫–∞.

    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        thread_id (str): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ç—Ä–µ–¥–∞.
        asst_id (str): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
        gpt_token (str): —Ç–æ–∫–µ–Ω –¥–ª—è ChatGPT.
        sale_token (str): —Ç–æ–∫–µ–Ω –¥–ª—è —Å–∏—Å—Ç–µ–º—ã Sale.
        client_id (str): –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∫–ª–∏–µ–Ω—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ Sale.
        callback_url (str): URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        message (str): —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        # –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
        client = OpenAI(api_key=gpt_token)
        
        # –°—Ç—Ä–∏–º–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç ChatGPT
        messages = stream_chat_completion(client, thread_id, asst_id, message)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Sale —á–µ—Ä–µ–∑ callback URL
        if messages:
            send_callback(callback_url, sale_token, client_id, messages)
        else:
            logger.error("‚ö†Ô∏è No messages received from ChatGPT")
    
    except Exception as e:
        logger.error(f"‚ùå Error in main process: {e}")

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    thread_id = "example-thread-id"
    asst_id = "example-asst-id"
    gpt_token = "example-gpt-token"
    sale_token = "example-sale-token"
    client_id = "example-client-id"
    callback_url = "https://example.com/callback"
    message = "–ü—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"

    # –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
    main(thread_id, asst_id, gpt_token, sale_token, client_id, callback_url, message)
